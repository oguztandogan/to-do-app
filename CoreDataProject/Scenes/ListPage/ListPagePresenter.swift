//
//  ListPagePresenter.swift
//  CoreDataProject
//
//  Created by Oguz Tandogan on 24.05.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import CoreData

final class ListPagePresenter {

    // MARK: - Private properties -

    private let view: ListPageViewInterface
    private let formatter: ListPageFormatterInterface
    private let interactor: ListPageInteractorInterface
    private let wireframe: ListPageWireframeInterface
    

    // MARK: - Lifecycle -

    init(view: ListPageViewInterface, formatter: ListPageFormatterInterface, interactor: ListPageInteractorInterface, wireframe: ListPageWireframeInterface) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    private func fetchTasksFromCoreData() {
        interactor.fetchItems { [weak self] taskList in
            self?.getTaskList(taskList: taskList)
            self?.view.reloadTableView()
        }
    }
    
    private func addTaskToCoreData(taskName: String?) {
        guard let taskName = taskName else { return }
        interactor.createItem(listItem: taskName) { [weak self] task in
            guard let self = self,
                  let strongTask = task as? Tasks
            else { return }
            self.formatter.addTaskToList(task: strongTask)
            self.view.addTaskToTableView()
        }
    }
    
    private func deleteTaskFromCoreData(deletedTask: NSManagedObject) {
        interactor.deleteItem(deletedTask: deletedTask)
    }
}

// MARK: - Extensions -

extension ListPagePresenter: ListPagePresenterInterface {
    
    func viewWillAppear() {
        fetchTasksFromCoreData()
    }
    
    func getTaskList(taskList: [Tasks]) {
        formatter.updateTaskList(taskList: taskList)
    }
    
    func getCellData(indexPath: IndexPath) -> String {
        return formatter.loadTaskName(index: indexPath.row)
    }
    
    func addButtonAction() {
        wireframe.presentTaskAdditionPopup { [weak self] text in
            self?.addTaskToCoreData(taskName: text)
        }
    }
    
    func getNumberOfItems() -> Int {
        return formatter.getNumberOfItems()
    }
    
    func deleteItemFromData(indexPath: IndexPath) {
        let deletedTask = formatter.loadDeletedTask(index: indexPath.row)
        formatter.deleteTask(index: indexPath.row)
        deleteTaskFromCoreData(deletedTask: deletedTask)
    }
    
    func navigateToTaskDetails(indexPath: IndexPath) {
        let selectedTask = formatter.getSelectedTask(index: indexPath.row)
        wireframe.navigateToTaskDetails(taskDetails: selectedTask)
    }
}
